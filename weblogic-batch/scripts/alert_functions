#######################################################
# This file contains only functions for alerting through Cloud Watch Log Groups and email alerts
#  
# - Values in chips-terrarm.git define the log file: "    "ch_support_alert.log" = { file_path = "NFSPATH/running-servers/ch-support ...
# - Cloud Watch Log Groups have been created, example:  "chips-ef-batch-ch_support_alert.log"
# - Log Insight Queries search for strings ALERT_CH_SUPPORT and MAIL_CH_SUPPORT in file ch_support_alert.log
# - Alarms are triggered by Metric Filters and XMatters alerts or eMails are fired.
#######################################################

LOCATION_STRING="Sent from: ${ENVIRONMENT_LABEL} - ${T3_HOST_FQDN} - EC2 instance ID ${EC2_INSTANCE_ID} (${APP_INSTANCE_NAME})"

## returns 1 if variable EMAIL_ADDRESS_CSI is unset or a blank string, otherwise 0 

check_email_address_defined_f ()
{
  if [ -z "${EMAIL_ADDRESS_CSI}" ]; then
    echo `date`": Unable to send email alert - no address set in EMAIL_ADDRESS_CSI."
    return 1
  fi
}

## The function patrol_log_alert_chaps_f is used to write a particular string to a remote
## log file so that Cloud Watch can immediately alert the Oncall officer.
##
## The function accepts an enclosed string that MUST contain:
## patrol_log_alert_chaps_f " [path] [script_name] [helpful_text] "
##
## The path is used to distinguish test and live systems so one script can be used throughout
## helpful_text must show the on-call officer what failed and where to look
##
## Example:
##   patrol_log_alert_chaps_f " `pwd`/`basename $0`: LetterProducer may be already running or connection error."
##

patrol_log_alert_chaps_f ()
{
  if [[ ${LIVE_ENVIRONMENT} == "true" ]]; then
    echo `date`: ALERT_CH_SUPPORT : $1  >> $HOME/logs/ch-support/ch_support_alert.log
    if check_email_address_defined_f; then
      echo -e "To:${EMAIL_ADDRESS_CSI}\nFrom:${EMAIL_ADDRESS_CSI}\nSubject:CHAPS Alert: $1\n\n${LOCATION_STRING}\n\n$1\n\n" | msmtp -t
    fi
  fi
}

##
## This test script writes a non-alert string to log file for testing access permissions
##

patrol_log_testharness_f ()
{
  echo `date`": Lets write a test string via patrol_log_test_f to chapspatrol.log."
  ## Write a test string that will NOT kick off Patrol alarm.
  echo `date`: MAIL_CH_SUPPORT : TESTING $1  >> $HOME/logs/ch-support/ch_support_alert.log
}

##
## This function will send string via email to CSI group.
## NOTE: This can be replaced by Cloud Watch using MAIL_CH_SUPPORT in ch_support_alert.log if required, 
#    but we do override email addresses in Dev and Testing so we use msmtp for this
## This function accepts accepts two arguments.
##
## First is subject as an enclosed string .
## Second is body text as an enclosed string .
##
## Example:
##  email_CHAPS_group_f "Disk Space high on chpwlo-pl3" "Please check disk space on Weblogic Servers"

email_CHAPS_group_f ()
{
  if check_email_address_defined_f; then
    echo -e "To:${EMAIL_ADDRESS_CSI}\nFrom:${EMAIL_ADDRESS_CSI}\nSubject:CHAPS Alert: $1\n\n${LOCATION_STRING}\n\n$2\n\n" | msmtp -t
    if [[ ${LIVE_ENVIRONMENT} == "true" ]]; then
      echo -e "To:${EMAIL_ADDRESS_SERVICE_NOW}\nFrom:${EMAIL_ADDRESS_CSI}\nSubject:CHAPS Alert: $1\n\n${LOCATION_STRING}\n\n$2\n\n" | msmtp -t
    fi
  fi
}

email_report_CHAPS_group_f ()
{
  if check_email_address_defined_f; then
     echo -e "To:${EMAIL_ADDRESS_CSI}\nFrom:${EMAIL_ADDRESS_CSI}\nSubject:CHAPS Report: $1\n\n${LOCATION_STRING}\n\n$2\n\n" | msmtp -t
  fi
}

##
## This function will send an email to a list of recipients
## This function expects three arguments.
##
## First is one or more email addresses, separated by commas.
## Second is the subject as an enclosed string.
## Third is the body text as an enclosed string.
##
## Example:
##  email_report_f storage@companieshouse.gov.uk,csi@companieshouse.gov.uk "Disk Space high on chpwlo-pl3" "Please check disk space on Weblogic Servers"
email_report_f ()
{
  if check_email_address_defined_f; then
     echo -e "To:$1\nFrom:${EMAIL_ADDRESS_CSI}\nSubject:$2\n\n${LOCATION_STRING}\n\n$3\n\n" | msmtp -t
  fi
}
